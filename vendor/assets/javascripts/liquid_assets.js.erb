(function( namespace, document, undefined) {

    Array.isArray || (Array.isArray = function ( a ) {
      return'' + a !== a && {}.toString.call( a ) == '[object Array]'
    });

    namespace = namespace.<%= LiquidAssets::Config.namespace%> || (namespace.<%=LiquidAssets::Config.namespace%>={});
    namespace.Templates || ( namespace.Templates={} );

    namespace.Globals || ( namespace.Globals = {} );
    var server_globals = <%= LiquidAssets::Config.globals.to_json.html_safe %>;
    for ( var key in server_globals ){
        namespace.Globals[ key ] = server_globals[key];
    }

    namespace.Render = function( name, data ){
        if (data == null) {
            data = {};
        }
        for ( var key in namespace.Globals )
            if (! data.hasOwnProperty(key) )
                data[key] = namespace.Globals[key];

        return namespace.Templates[name]( data, namespace.Filters );
    };

    namespace.RenderPartial = function( name, data ){
        var path, parts = name.split('/');
        if ( parts.length > 1 )
            path = parts.slice( 0, parts.length-1) +'/_'+parts[ parts.length-1 ];
        else
            path = '_' + parts[ parts.length-1 ];
        return namespace.Render( path, data );
    };

    namespace._FNS = {
        html: function (html) {
            return html.replace(/\\/g, '\\\\')
                .replace(/'/g, '\\\'')
                .replace(/"/g, '\\\"')
                .replace(/\r/g, '\\r')
                .replace(/\n/g, '\\n');
        },
        err: function (msg) {
            var html = '<pre style="font-family:Courier; font-weight:bold; \
font-size:14px; color:red; padding:4px 20px 4px 20px; border:1px solid #CCC; \
background-color:#FFF5F0; line-height:1.6em; white-space:pre-wrap; \
white-space:-moz-pre-wrap; white-space:-pre-wrap; white-space:-o-pre-wrap; \
word-wrap:break-word; z-index:9999">' + msg + '</pre>';
            return html;
        },
        rethrow: function (err, filename) {
            var msg = 'An error occurred while rendering\n' +
                'Line: ' + $_line_num + (filename ? '  File: ' + filename : '') +
                '\n    ' + err;
            $_buf += $_err(msg);
        },
        merge: function () {
            var ret = {};
            for (var i in arguments) {
                var obj = arguments[i];
                for (var j in obj) {
                    ret[j] = obj[j];
                }
            }
            return ret;
        },
        range: function (s, e) {
            s = parseInt(s);
            e = parseInt(e);
            var r = [];
            if (isNaN(s) || isNaN(e)) return r;
            for (; s <= e; s++) {
                r.push(s);
            }
            return r;
        },
        'array': function (data) {
            if (Array.isArray(data)) return data;
            var ret = [];
            for (var i in data) {
                if (i !== 'size') {
                    ret.push(data[i]);
                }
            }
            return ret;
        }
    };

    var toNumber = function(input) {
        return Number(input);
    };

    var toString = function(input) {
        if (!input) {
            return '';
        }
        if (_.isString(input)) {
            return input;
        } else if (typeof input.toString === "function") {
            return input.toString();
        } else {
            return Object.prototype.toString.call(input);
        }
    };

    namespace.Filters = {
        size: function(input) {
            return input.length;
        },
        downcase: function(input) {
            return toString(input).toLowerCase();
        },
        upcase: function(input) {
            return toString(input).toUpperCase();
        },
        append: function(input, other) {
            return [toString(input), toString(other)].join();
        },
        prepend: function(input, other) {
            return [toString(other), toString(input)].join();
        },
        empty: function(input) {
            if (!input) {
                return true;
            }
            if (input.length == null) {
                return false;
            }
            return true;
        },
        truncate: function(input, length, truncateString) {
            var l;

            if (length == null) {
                length = 50;
            }
            if (truncateString == null) {
                truncateString = '...';
            }
            input = toString(input);
            truncateString = toString(truncateString);
            if (input == null) {
                return '';
            }
            if (!input.slice) {
                return '';
            }
            length = toNumber(length);
            l = length - truncateString.length;
            if (l < 0) {
                l = 0;
            }
            if (input.length > length) {
                return input.slice(0, +l + 1 || 9e9) + truncateString;
            } else {
                return input;
            }
        },
        truncatewords: function(input, words, truncateString) {
            var l, wordlist;

            if (words == null) {
                words = 15;
            }
            if (truncateString == null) {
                truncateString = '...';
            }
            input = toString(input);
            if (input == null) {
                return '';
            }
            if (!input.slice) {
                return '';
            }
            wordlist = input.split(" ");
            words = toNumber(words);
            l = words - 1;
            if (l < 0) {
                l = 0;
            }
            if (wordlist.length > l) {
                return wordlist.slice(0, +l + 1 || 9e9).join(" ") + truncateString;
            } else {
                return input;
            }
        },
        split: function(input, pattern) {
            input = toString(input);
            if (!input) {
                return null;
            }
            return input.split(pattern);
        },
        join: function(input, glue) {
            if (glue == null) {
                glue = ' ';
            }
            return _(input).flatten().join(glue);
        },
        first: function(array) {
            if (array.length > 0) {
                return array[0];
            } else {
                return null;
            }
        },
        last: function(array) {
            if (array.length > 0) {
                return array[array.length - 1];
            } else {
                return null;
            }
        },
        plus: function(input, operand) {
            return toNumber(input) + toNumber(operand);
        },
        minus: function(input, operand) {
            return toNumber(input) - toNumber(operand);
        },
        times: function(input, operand) {
            return toNumber(input) * toNumber(operand);
        },
        dividedBy: function(input, operand) {
            return toNumber(input) / toNumber(operand);
        },
        modulo: function(input, operand) {
            return toNumber(input) % toNumber(operand);
        }
    };

}(window, document));
